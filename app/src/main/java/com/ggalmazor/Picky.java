/*
 * This source file was generated by the Gradle 'init' task
 */
package com.ggalmazor;

import com.ggalmazor.brain.Brain;
import com.slack.api.bolt.App;
import com.slack.api.bolt.AppConfig;
import com.slack.api.bolt.jetty.SlackAppServer;
import com.slack.api.methods.MethodsClient;
import com.slack.api.methods.SlackApiException;
import com.slack.api.model.event.MessageEvent;
import io.github.cdimascio.dotenv.Dotenv;

import java.io.IOException;
import java.util.List;
import java.util.regex.Pattern;

public class Picky {
    public static void main(String[] args) throws Exception {
        Dotenv dotenv = Dotenv.load();
        var appConfig = AppConfig.builder();
        appConfig.signingSecret(dotenv.get("SLACK_SIGNING_SECRET"));
        appConfig.singleTeamBotToken(dotenv.get("SLACK_BOT_TOKEN"));
        var app = new App(appConfig.build());

        var brain = Brain.random();

        Pattern acronymPattern = Pattern.compile("([A-Z]{2,5})");
        app.event(MessageEvent.class, (payload, ctx) -> {
            MethodsClient client = ctx.client();
            MessageEvent event = payload.getEvent();
            List<String> acronyms = acronymPattern.matcher(event.getText()).results().map(result -> result.group(1)).toList();

            acronyms.forEach(acronym -> {
                var descriptions = brain.getDescriptions(acronym);
                var text = descriptions.size() == 1
                        ? acronym + " stands for:\n```" + String.join("\n", descriptions) + "\n```"
                        : acronym + " stands for: " + descriptions.getFirst();
                try {
                    client.chatPostMessage(r -> r.channel(event.getChannel()).text(text));
                } catch (IOException | SlackApiException e) {
                    ctx.logger.error("Error sending response", e);
                }
            });

            return ctx.ack();
        });

        var server = new SlackAppServer(app);
        server.start();
    }
}
