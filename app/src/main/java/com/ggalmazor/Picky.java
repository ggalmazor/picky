/*
 * This source file was generated by the Gradle 'init' task
 */
package com.ggalmazor;

import com.ggalmazor.brain.Brain;
import com.ggalmazor.command.Command;
import com.ggalmazor.command.Commands;
import com.ggalmazor.reply.Replies;
import com.ggalmazor.reply.Reply;
import com.slack.api.bolt.App;
import com.slack.api.bolt.AppConfig;
import com.slack.api.bolt.jetty.SlackAppServer;
import com.slack.api.model.event.AppMentionEvent;
import com.slack.api.model.event.MessageEvent;
import io.github.cdimascio.dotenv.Dotenv;

import java.util.Optional;

public class Picky {
    public static void main(String[] args) throws Exception {
        Dotenv dotenv = Dotenv.load();
        var appConfig = AppConfig.builder();
        appConfig.signingSecret(dotenv.get("SLACK_SIGNING_SECRET"));
        appConfig.singleTeamBotToken(dotenv.get("SLACK_BOT_TOKEN"));
        var app = new App(appConfig.build());

        var brain = Brain.random();

        Replies.initialize();
        app.event(MessageEvent.class, (payload, ctx) -> {
            MessageEvent event = payload.getEvent();
            if (event.getText().contains(ctx.getBotUserId())) return ctx.ack();

            Optional<Reply> maybeReply = Replies.get(brain, event);
            if (maybeReply.isEmpty()) return ctx.ack();

            maybeReply.get().accept(ctx, event);
            return ctx.ack();
        });

        Commands.initialize();
        app.event(AppMentionEvent.class, (payload, ctx) -> {
            AppMentionEvent event = payload.getEvent();
            Optional<Command> maybeCommand = Commands.get(brain, event);
            if (maybeCommand.isEmpty()) return ctx.ack();

            maybeCommand.get().accept(ctx, event);
            return ctx.ack();
        });

        var server = new SlackAppServer(app);
        server.start();
    }
}
